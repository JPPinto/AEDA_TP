<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3">
  <compounddef id="_escola_8cpp" kind="file">
    <compoundname>Escola.cpp</compoundname>
    <includes refid="_escola_8h" local="yes">Escola.h</includes>
    <incdepgraph>
      <node id="52">
        <label>Professor.h</label>
        <link refid="_professor_8h_source"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>Aluno.h</label>
        <link refid="_aluno_8h_source"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>string</label>
      </node>
      <node id="48">
        <label>Turma.h</label>
        <link refid="_turma_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>vector</label>
      </node>
      <node id="53">
        <label>sstream</label>
      </node>
      <node id="51">
        <label>Disciplina.h</label>
        <link refid="_disciplina_8h_source"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Escola.h</label>
        <link refid="_escola_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>Horario.h</label>
        <link refid="_horario_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>Excepcao.h</label>
        <link refid="_excepcao_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Escola.cpp</label>
        <link refid="Escola.cpp"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Escola.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//Aluno</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight><highlight class="normal">vector&lt;Aluno<sp/>*&gt;<sp/><ref refid="class_escola_1a881727d5171216be19d3e63cf95e2110" kindref="member">Escola::getAlunos</ref>()<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_alunos;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a56f72e713a433a9b63086df24de6985a" kindref="member" tooltip="Acrescenta alunos ao vector _alunos.">Escola::setAluno</ref>(<ref refid="class_aluno" kindref="compound" tooltip="Aluno de uma escola.">Aluno</ref>*<sp/>a){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>_alunos.push_back(a);</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="class_aluno" kindref="compound" tooltip="Aluno de uma escola.">Aluno</ref><sp/>*<sp/><ref refid="class_escola_1a7582a678219ca0977bab1ac1db1109f2" kindref="member" tooltip="Devolve o Aluno com o nome igual a n.">Escola::getAlunoByNome</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Aluno*&gt;::iterator<sp/>it<sp/>=<sp/>_alunos.begin();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_alunos.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)-&gt;getNome()<sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_aluno" kindref="compound" tooltip="Aluno de uma escola.">Aluno</ref><sp/>*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_aluno" kindref="compound" tooltip="Aluno de uma escola.">Aluno</ref>(n,<sp/>1,<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_turma" kindref="compound">Turma</ref>()));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_aluno_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Aluno a ser acedido nao existe.">AlunoNaoExistente</ref>(a);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1ab8911a8daa03ac6172defbcb68710b06" kindref="member" tooltip="Adiciona um Aluno a Escola.">Escola::addAluno</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>nome,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numero,<sp/><ref refid="class_turma" kindref="compound">Turma</ref><sp/>*<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_aluno" kindref="compound" tooltip="Aluno de uma escola.">Aluno</ref><sp/>*<sp/>a2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_aluno" kindref="compound" tooltip="Aluno de uma escola.">Aluno</ref>(nome,<sp/>numero,<sp/>t);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>_alunos.push_back(a2);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a61476572624adfbc5ff2a0dce1e8ce0b" kindref="member" tooltip="Mostra o Aluno no ecra.">Escola::showAluno</ref>(<ref refid="class_aluno" kindref="compound" tooltip="Aluno de uma escola.">Aluno</ref><sp/>*<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Aluno*&gt;::iterator<sp/>it<sp/>=<sp/>_alunos.begin();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>s;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_alunos.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nome:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a-&gt;getNome()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>Numero:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a-&gt;<ref refid="class_aluno_1a258e8f5c3dbc8b19efadaf20ba48874f" kindref="member">getNumero</ref>()</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>Turma:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a-&gt;<ref refid="class_aluno_1a258e8f5c3dbc8b19efadaf20ba48874f" kindref="member">getNumero</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.str();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_aluno_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Aluno a ser acedido nao existe.">AlunoNaoExistente</ref>(a);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1ab8ae7317b753dbe8308a60ac39d4f714" kindref="member" tooltip="Altera informacao do Aluno.">Escola::updateAluno</ref>(<ref refid="class_aluno" kindref="compound" tooltip="Aluno de uma escola.">Aluno</ref><sp/>*<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Aluno*&gt;::iterator<sp/>it<sp/>=<sp/>_alunos.begin();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_alunos.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it)<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_aluno_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Aluno a ser acedido nao existe.">AlunoNaoExistente</ref>(a);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1acfa55addf5866a486acdfdc84ee9c66a" kindref="member" tooltip="Remove um Aluno da Escola.">Escola::removeAluno</ref>(<ref refid="class_aluno" kindref="compound" tooltip="Aluno de uma escola.">Aluno</ref><sp/>*<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Aluno*&gt;::iterator<sp/>it<sp/>=<sp/>_alunos.begin();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_alunos.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_alunos.erase(it);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_aluno_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Aluno a ser acedido nao existe.">AlunoNaoExistente</ref>(a);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">//Professor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">vector&lt;Professor<sp/>*&gt;<sp/><ref refid="class_escola_1a8cdb86f03082f15f5f3ce63d1ae0b1f2" kindref="member" tooltip="Devolve todos os professores existentes na Escola.">Escola::getProfessores</ref>(){</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_professores;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a69bc6d8eb743a508d2b805285fd59e35" kindref="member" tooltip="Acrescenta professores ao vector _professores.">Escola::setProfessor</ref>(<ref refid="class_professor" kindref="compound" tooltip="Professor de uma Escola (class Base), podendo ou nao ser Director de Turma.">Professor</ref>*<sp/>p){</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>_professores.push_back(p);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="class_professor" kindref="compound" tooltip="Professor de uma Escola (class Base), podendo ou nao ser Director de Turma.">Professor</ref><sp/>*<sp/><ref refid="class_escola_1a1f0dba75b82a3aec3cdaccafec4350c3" kindref="member" tooltip="Devolve o Professor com o nome igual a n.">Escola::getProfessorByNome</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i<sp/>&lt;<sp/>_professores.size();i++){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_professores[i]-&gt;getNome()==n){</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_professores[i];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_professor" kindref="compound" tooltip="Professor de uma Escola (class Base), podendo ou nao ser Director de Turma.">Professor</ref>*<sp/>p=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_professor" kindref="compound" tooltip="Professor de uma Escola (class Base), podendo ou nao ser Director de Turma.">Professor</ref>(n,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_professor_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Professor a ser acedido nao existe.">ProfessorNaoExistente</ref>(p);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a9cb288aece2339850bd18eaf1614f8b9" kindref="member" tooltip="Adiciona um Professor a Escola.">Escola::addProfessor</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_professor" kindref="compound" tooltip="Professor de uma Escola (class Base), podendo ou nao ser Director de Turma.">Professor</ref><sp/>*<sp/>p2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_professor" kindref="compound" tooltip="Professor de uma Escola (class Base), podendo ou nao ser Director de Turma.">Professor</ref>(n,<sp/><ref refid="class_escola_1a75b1f1a614ca1163cf2c53f25331b939" kindref="member" tooltip="Devolve a Disciplina com o nome igual a n.">getDisciplinaByNome</ref>(d),<sp/><ref refid="class_escola_1a5dab98b3f36b81a764b104d9d9a302e8" kindref="member" tooltip="Devolve a Turma com o id igual a id.">getTurmaById</ref>(t));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>_professores.push_back(p2);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_escola_1addc6cd7b85c6fdba76dd536c580c16c8" kindref="member" tooltip="Mostra o Professor no ecra.">Escola::showProfessor</ref>(<ref refid="class_professor" kindref="compound" tooltip="Professor de uma Escola (class Base), podendo ou nao ser Director de Turma.">Professor</ref><sp/>*<sp/>p){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Professor*&gt;::iterator<sp/>it<sp/>=<sp/>_professores.begin();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>s;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_professores.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nome:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p-&gt;getNome()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>Disciplina:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p-&gt;getDiscipina()-&gt;<ref refid="class_disciplina_1a09445908668708d2b62feb8b600a6af6" kindref="member">getNome</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;p-&gt;getTurmas().size();i++){</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>Turma:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p-&gt;getTurmas()[i]-&gt;getID()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>Ano:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p-&gt;getTurmas()[i]-&gt;getAnoEscolar()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.str();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_professor_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Professor a ser acedido nao existe.">ProfessorNaoExistente</ref>(p);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a409612d09d981eb7e6e3a532080d7aed" kindref="member" tooltip="Altera a informacao do Professor.">Escola::updateProfessor</ref>(<ref refid="class_professor" kindref="compound" tooltip="Professor de uma Escola (class Base), podendo ou nao ser Director de Turma.">Professor</ref><sp/>*<sp/>p){</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Professor*&gt;::iterator<sp/>it<sp/>=<sp/>_professores.begin();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_professores.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b){</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it)<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_professor_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Professor a ser acedido nao existe.">ProfessorNaoExistente</ref>(p);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1ab88ff73f646f14380fdbb5a55bc49882" kindref="member" tooltip="Remove um Professor da Escola.">Escola::removeProfessor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Professor*&gt;::iterator<sp/>it<sp/>=<sp/>_professores.begin();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_professores.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/><ref refid="class_escola_1a1f0dba75b82a3aec3cdaccafec4350c3" kindref="member" tooltip="Devolve o Professor com o nome igual a n.">getProfessorByNome</ref>(n))<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b){</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_professores.erase(it);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_professor_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Professor a ser acedido nao existe.">ProfessorNaoExistente</ref>(<ref refid="class_escola_1a1f0dba75b82a3aec3cdaccafec4350c3" kindref="member" tooltip="Devolve o Professor com o nome igual a n.">getProfessorByNome</ref>(n));</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//Turma</highlight></codeline>
<codeline lineno="219"><highlight class="comment"></highlight><highlight class="normal">vector&lt;Turma<sp/>*&gt;<sp/><ref refid="class_escola_1acee757e16892f33820b22a7d7749d97d" kindref="member" tooltip="Devolve todas as turmas existentes na Escola.">Escola::getTurmas</ref>(){</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_turmas;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a75635f871c420f3d1373285b1e773ce8" kindref="member" tooltip="Acrescenta turmas ao vector turmas.">Escola::setTurma</ref>(<ref refid="class_turma" kindref="compound">Turma</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>_turmas.push_back(t);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><ref refid="class_turma" kindref="compound">Turma</ref><sp/>*<sp/><ref refid="class_escola_1a5dab98b3f36b81a764b104d9d9a302e8" kindref="member" tooltip="Devolve a Turma com o id igual a id.">Escola::getTurmaById</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Turma*&gt;::iterator<sp/>it=_turmas.begin();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>it!=_turmas.end();it++){</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*it)-&gt;getID()==id){</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_turma_nao_existente" kindref="compound" tooltip="Excepcao lancada quando a Turma a ser acedida nao existe.">TurmaNaoExistente</ref>((*it));</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a86d547f74fe935bfd8bdf3cd35d25860" kindref="member" tooltip="Adiciona uma Turma a Escola.">Escola::addTurma</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>anoEscolar){</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_turma" kindref="compound">Turma</ref><sp/>*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_turma" kindref="compound">Turma</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>anoEscolar);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>_turmas.push_back(t2);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a91096932c5326cb2e5c30cbd860c126c" kindref="member" tooltip="Mostra a Turma no ecra.">Escola::showTurma</ref>(<ref refid="class_turma" kindref="compound">Turma</ref><sp/>*<sp/>t){</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Turma*&gt;::iterator<sp/>it<sp/>=<sp/>_turmas.begin();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>s;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_turmas.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Turma:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t-&gt;<ref refid="class_turma_1a25bc31537a7fb3345712b780ff2f825f" kindref="member">getID</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>Ano:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t-&gt;<ref refid="class_turma_1a18af6d19b01102c00f07720f7b149252" kindref="member">getAnoEscolar</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.str();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_turma_nao_existente" kindref="compound" tooltip="Excepcao lancada quando a Turma a ser acedida nao existe.">TurmaNaoExistente</ref>(t);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a50eb8daf94842be3184daa133140157d" kindref="member" tooltip="Altera a informacao da Turma.">Escola::updateTurma</ref>(<ref refid="class_turma" kindref="compound">Turma</ref><sp/>*<sp/>t){</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Turma*&gt;::iterator<sp/>it<sp/>=<sp/>_turmas.begin();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_turmas.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b){</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it)<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_turma_nao_existente" kindref="compound" tooltip="Excepcao lancada quando a Turma a ser acedida nao existe.">TurmaNaoExistente</ref>(t);</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a4011a23d4f49827e7cc74ea5739e9033" kindref="member" tooltip="Remove uma Turma da Escola.">Escola::removeTurma</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Turma*&gt;::iterator<sp/>it<sp/>=<sp/>_turmas.begin();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_turmas.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/><ref refid="class_escola_1a5dab98b3f36b81a764b104d9d9a302e8" kindref="member" tooltip="Devolve a Turma com o id igual a id.">getTurmaById</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b){</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_turmas.erase(it);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_turma_nao_existente" kindref="compound" tooltip="Excepcao lancada quando a Turma a ser acedida nao existe.">TurmaNaoExistente</ref>((*it));</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="comment">//Disciplina</highlight></codeline>
<codeline lineno="320"><highlight class="comment"></highlight><highlight class="normal">vector&lt;Disciplina<sp/>*&gt;<sp/><ref refid="class_escola_1a733893af8f3535eebe4624525945589d" kindref="member" tooltip="Devolve todas as Disciplinas que sao leccionadas na Escola.">Escola::getDiscipinas</ref>()<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_disciplinas;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_escola_1ac117e7e2d2f9c2ef22b41b6dc7a96708" kindref="member" tooltip="Acrescenta disciplinas ao vector _disciplinas.">Escola::setDisciplina</ref>(<ref refid="class_disciplina" kindref="compound" tooltip="Class representa uma Disciplina contendo a sua designacao, duracao e hora de inicio.">Disciplina</ref>*<sp/>d){</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>_disciplinas.push_back(d);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><ref refid="class_disciplina" kindref="compound" tooltip="Class representa uma Disciplina contendo a sua designacao, duracao e hora de inicio.">Disciplina</ref><sp/>*<sp/><ref refid="class_escola_1a75b1f1a614ca1163cf2c53f25331b939" kindref="member" tooltip="Devolve a Disciplina com o nome igual a n.">Escola::getDisciplinaByNome</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Disciplina*&gt;::iterator<sp/>it=_disciplinas.begin();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;it!=_disciplinas.end();it++){</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*it)-&gt;getNome()==n){</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a75b1f1a614ca1163cf2c53f25331b939" kindref="member" tooltip="Devolve a Disciplina com o nome igual a n.">getDisciplinaByNome</ref>(n);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_disciplina_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Professor a ser acedido nao existe.">DisciplinaNaoExistente</ref>((*it));</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1ad60836279a3f0a7d974a49b950aabda0" kindref="member" tooltip="Adiciona uma Disciplina a Escola.">Escola::addDisciplina</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>nome,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h){</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_disciplina" kindref="compound" tooltip="Class representa uma Disciplina contendo a sua designacao, duracao e hora de inicio.">Disciplina</ref><sp/>*<sp/>d2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_disciplina" kindref="compound" tooltip="Class representa uma Disciplina contendo a sua designacao, duracao e hora de inicio.">Disciplina</ref>(nome,<sp/>d,<sp/>h);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>_disciplinas.push_back(d2);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a3578c85887dd28c9d0b6f7c7f10f3020" kindref="member" tooltip="Mostra a Disciplina no ecra.">Escola::showDisciplina</ref>(<ref refid="class_disciplina" kindref="compound" tooltip="Class representa uma Disciplina contendo a sua designacao, duracao e hora de inicio.">Disciplina</ref><sp/>*<sp/>d){</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Disciplina*&gt;::iterator<sp/>it<sp/>=<sp/>_disciplinas.begin();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>s;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_disciplinas.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Disciplina:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>d-&gt;<ref refid="class_disciplina_1a09445908668708d2b62feb8b600a6af6" kindref="member">getNome</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>Duracao:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>d-&gt;<ref refid="class_disciplina_1aa3f19dc881279231e7eaa3194f01c4df" kindref="member">getDuracao</ref>()</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>Hora<sp/>de<sp/>inicio:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>d-&gt;<ref refid="class_disciplina_1afde765c64f78f530d09d404d15c4c5dd" kindref="member">getHoraInicio</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.str();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_disciplina_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Professor a ser acedido nao existe.">DisciplinaNaoExistente</ref>(d);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a3e5bd122514b59138e8fac07ca63e23a" kindref="member" tooltip="Altera a informacao da Disciplina.">Escola::updateDisciplina</ref>(<ref refid="class_disciplina" kindref="compound" tooltip="Class representa uma Disciplina contendo a sua designacao, duracao e hora de inicio.">Disciplina</ref><sp/>*<sp/>d){</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Disciplina*&gt;::iterator<sp/>it<sp/>=<sp/>_disciplinas.begin();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_disciplinas.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b){</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it)<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_disciplina_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Professor a ser acedido nao existe.">DisciplinaNaoExistente</ref>(d);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_escola_1a2e726efed10bae8f782f2f5370ec9f44" kindref="member" tooltip="Remove uma disciplina da Escola.">Escola::removeDisciplina</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Disciplina*&gt;::iterator<sp/>it<sp/>=<sp/>_disciplinas.begin();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>_disciplinas.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)<sp/>==<sp/><ref refid="class_escola_1a75b1f1a614ca1163cf2c53f25331b939" kindref="member" tooltip="Devolve a Disciplina com o nome igual a n.">getDisciplinaByNome</ref>(n))<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b){</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_disciplinas.erase(it);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_disciplina_nao_existente" kindref="compound" tooltip="Excepcao lancada quando o Professor a ser acedido nao existe.">DisciplinaNaoExistente</ref>((*it));</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">Escola::Escola()<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/Documentos/git/AEDA_TP1/AEDA_TP1/Escola.cpp"/>
  </compounddef>
</doxygen>
